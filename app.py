import time  # to simulate real-time data, time loop
import numpy as np  # np mean, np random
import pandas as pd  # read csv, df manipulation
import plotly.express as px  # interactive charts
import streamlit as st  # 🎈 data web app development
import requests  # Added import for HTTP requests

# Your API key from Streamlit secrets or environment variables
api_key = st.secrets["api_key"]  # Replace with your API key

# Load your dataset for the carbon footprint analysis
df = pd.read_csv("datafinal.csv")

# Load dataset for climate change information
def get_data() -> pd.DataFrame:
    return pd.read_csv('Annual_Surface_Temperature_Change.csv')

climate_data = get_data()

# Set the page configuration for Streamlit
st.set_page_config(layout="wide", page_title="EcoGenAI - Your Carbon Footprint Analyser & Climate Change Information", page_icon="🌍")

# Sidebar or Main title
st.title("EcoGenAI - Your Carbon Footprint Analyser & Climate Change Information 🌍")

# --- Carbon Footprint Analysis ---
st.subheader("🌍 Your Country for Carbon Footprint Analysis")
country = st.selectbox("Select your country", list(df.Area.unique()), index=203)

col1, col2 = st.columns(2)

with col1:
    st.subheader("🚗 Daily commute distance (in km)")
    distance = st.slider("Distance", 0.0, 100.0, key="distance_input")

    st.subheader("💡 Monthly electricity consumption (in kWh)")
    electricity = st.slider("Electricity", 0.0, 1000.0, key="electricity_input")

with col2:
    st.subheader("🍽 Waste generated per week (in kg)")
    waste = st.slider("Waste", 0.0, 100.0, key="waste_input")

    st.subheader("🍽 Number of meals per day")
    meals = st.number_input("Meals", 0, key="meals_input", value=3)

# Normalize inputs
if distance > 0:
    distance_yearly = distance * 365  # Convert daily distance to yearly
if electricity > 0:
    electricity_yearly = electricity * 12  # Convert monthly electricity to yearly
if meals > 0:
    meals_yearly = meals * 365  # Convert daily meals to yearly
if waste > 0:
    waste_yearly = waste * 52  # Convert weekly waste to yearly

# EMISSION_FACTORS is a dictionary that contains the emission factors for different categories.
EMISSION_FACTORS = {
    "Default": {
        "Transportation": 0.40935,  # kgCO2/km
        "Diet": 1.25,  # kgCO2/meal, assuming 2.5kg CO2 per kg of food
        "Waste": 0.1  # kgCO2/kg of waste
    }
}

# Calculate carbon emissions
if distance > 0 and electricity > 0 and meals > 0 and waste > 0:
    transportation_emissions = EMISSION_FACTORS["Default"]["Transportation"] * distance_yearly
    diet_emissions = EMISSION_FACTORS["Default"]["Diet"] * meals_yearly
    waste_emissions = EMISSION_FACTORS["Default"]["Waste"] * waste_yearly

    # Convert emissions to tons and round off to 2 decimal points
    transportation_emissions = round(transportation_emissions / 1000, 2)
    dfCountry = df[df.Area == country]
    dfCountry = dfCountry[dfCountry.Year == dfCountry['Year'].max()]
    percent_elec_coal = dfCountry.loc[dfCountry['Variable'] == 'Coal', 'Value'].item()
    percent_elec_gas = dfCountry.loc[dfCountry['Variable'] == 'Gas', 'Value'].item()
    percent_elec_oil = dfCountry.loc[dfCountry['Variable'] == 'Other Fossil', 'Value'].item()
    percent_elec_clean = dfCountry.loc[dfCountry['Variable'] == 'Clean', 'Value'].item()
    electricity_emissions_coal = (electricity_yearly * (percent_elec_coal / 100) * 1.025) / 1000
    electricity_emissions_gas = (electricity_yearly * (percent_elec_gas / 100) * 0.443) / 1000
    electricity_emissions_oil = (electricity_yearly * (percent_elec_oil / 100) * 1.11) / 1000
    electricity_emissions_yearly = round(electricity_emissions_coal + electricity_emissions_gas + electricity_emissions_oil, 2)

    diet_emissions = round(diet_emissions / 1000, 2)
    waste_emissions = round(waste_emissions / 1000, 2)

    total_emissions = round(
        transportation_emissions + electricity_emissions_yearly + diet_emissions + waste_emissions, 2
    )

    if st.button("Calculate CO2 Emissions"):
        # Prepare the prompt for the AI model
        prompt = f"""
                Pretend you are an expert environmentalist and lifestyle analyst.
                Provide detailed actionable suggestions to reduce my carbon footprint.
                I travel {distance} kilometers daily and my annual electricity consumption is {electricity} kWh.
                I have {meals} meals per day and I produce {waste} kilograms of waste per week.
                My calculated carbon footprint is {total_emissions} tons CO2 per year.
                The electricity in my country is {percent_elec_coal}% coal, {percent_elec_gas}% natural gas, {percent_elec_oil}% oil, and {percent_elec_clean}% clean energy.
                The electricity emissions generated by me is {electricity_emissions_yearly} tons CO2 per year.
                The waste emissions generated by me is {waste_emissions} tons CO2 per year.
                The diet emissions generated by me is {diet_emissions} tons CO2 per year.
                The transportation emissions generated by me is {transportation_emissions} tons CO2 per year.
                My country is {country}. Compare my carbon footprint to the average {country} citizen and suggest actionable advice relevant to my country.
                Make sure to include suggestions in all of the categories and provide a detailed explanation for each suggestion.
                """

        with st.spinner("Generating suggestions..."):
            # Use the requests library to make the POST request to the Google API
            url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=" + api_key
            headers = {"Content-Type": "application/json"}
            data = {
                "contents": [
                    {
                        "parts": [
                            {"text": prompt}
                        ]
                    }
                ]
            }

            # Send the request
            response = requests.post(url, headers=headers, json=data)
            result = response.json()

            # Check if the response was successful
            if response.status_code == 200:
                # Extract the content from the response
                if 'candidates' in result and len(result['candidates']) > 0:
                    suggestion_text = result['candidates'][0]['content']['parts'][0]['text']
                    st.markdown(suggestion_text)  # Display the suggestion as markdown
                else:
                    st.error("No suggestions were found in the response.")
            else:
                st.error(f"Error: {response.status_code} - {response.text}")
        
        st.success("Thank you for using our app! Be sure to follow our suggestions! 🌍")

# --- Climate Change Information ---
st.title("EcoGuide - Climate Change Information 🌍")

# Top-level filters for climate data
country_filter = st.selectbox("Select the country for climate change data", pd.unique(climate_data["Country"]))

# Creating a single-element container for the plot
placeholder = st.empty()

# Row of years
years = []
years_no_f = []
for i in range(61):
    years.append('F' + str(1961 + i))
    years_no_f.append(1961 + i)

# DataFrame filter for selected country
df_country = climate_data[climate_data["Country"] == country_filter]
temperature_list = df_country[years]

# Plotly chart with labels
fig = px.line(
    df_country,
    x=years_no_f,
    y=np.array(temperature_list.iloc[0]),  # Make sure we access the first row of the filtered data
    title=f"Annual Surface Temperature Change in {country_filter}",
    labels={"x": "Year", "y": "Temperature Change (°C)"},
)

# Make chart animated
fig.update_traces(mode="lines+markers")
fig.update_layout(hovermode="x")

# Plotly chart update
placeholder.plotly_chart(fig)

# Change in temperature for country from 1961 to 2022
change_in_temp = df_country[years].sum(axis=1).iloc[0]  # Make sure to get the sum for the first row

# Get input from the user
inp = st.text_input('Do you have any questions about climate change to ask?')

# Add a submit button
if st.button('Submit'):
    # Add a placeholder
    placeholder = st.empty()
    
    # Add a loading indicator
    with st.spinner('Generating your response...'):
        # Create a prompt for the Gemini API
        prompt = (
            f"Pretend you are an expert on climate change. "
            f"Please respond to this question: {inp} "
            f"Context: The temperature change in {country_filter} has been {change_in_temp:.2f}°C from 1961 to 2022."
        )
        
        # URL for the Gemini API
        url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=" + api_key
        headers = {"Content-Type": "application/json"}
        data = {
            "contents": [
                {
                    "parts": [
                        {"text": prompt}
                    ]
                }
            ]
        }

        # Send the request
        response = requests.post(url, headers=headers, json=data)
        result = response.json()

        # Remove the loading indicator
        placeholder.empty()

        # Check if the response was successful
        if response.status_code == 200:
            # Extract the content from the response
            if 'candidates' in result and len(result['candidates']) > 0:
                suggestion_text = result['candidates'][0]['content']['parts'][0]['text']
                st.markdown(suggestion_text)  # Display the suggestion as markdown
            else:
                st.error("No suggestions were found in the response.")
        else:
            st.error(f"Error: {response.status_code} - {response.text}")

        st.success("Thank you for using our app! 🌍")
